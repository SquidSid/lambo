{"version":3,"sources":["candy-machine.ts","img/m-04.png","img/lineup.png","img/m-03.png","img/m-09.png","img/m-10.png","img/m-11.png","img/discord.png","img/twitter.png","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","price_lamports","price","toNumber","itemsAvailable","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setItemsAvailable","setItemsRedeemed","setItemsRemaining","setPrice","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","refreshCandyMachineState","toFixed","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","useEffect","mintcontainerClass","className","style","backgroundImage","img_hero","href","img_discord","img_twitter","disabled","onClick","variant","width","CircularProgress","date","onMount","onComplete","renderer","fullWidth","img_about","src","alt","img_itm1","img_itm2","img_itm3","img_lineup","toBase58","toLocaleString","Snackbar","autoHideDuration","onClose","Alert","process","network","Connection","startDateSeed","parseInt","theme","createTheme","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75827683.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n\n  price?: number;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n\n  // console.log('getCandyMachineState', state)\n  // console.log('getCandyMachineState price', state.data.price.toNumber())\n  // in lamports, e.g. '0.123' -> 123000000\n  // '2.235' -> 2345000000\n  const price_lamports = state.data.price.toNumber()\n  const price = 0.000000001 * price_lamports\n\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  console.log({\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  })\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n    price,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","export default __webpack_public_path__ + \"static/media/m-04.9897aaea.png\";","export default __webpack_public_path__ + \"static/media/lineup.4d19fa98.png\";","export default __webpack_public_path__ + \"static/media/m-03.1fc4c976.png\";","export default __webpack_public_path__ + \"static/media/m-09.c85e47c7.png\";","export default __webpack_public_path__ + \"static/media/m-10.ffaf356d.png\";","export default __webpack_public_path__ + \"static/media/m-11.9b704485.png\";","export default __webpack_public_path__ + \"static/media/discord.41a54583.png\";","export default __webpack_public_path__ + \"static/media/twitter.1b704970.png\";","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport './home.css'\n\n\nimport img_hero from \"./img/m-04.png\";\nimport img_lineup from \"./img/lineup.png\";\nimport img_about from \"./img/m-03.png\";\n\nimport img_itm1 from \"./img/m-09.png\";\nimport img_itm2 from \"./img/m-10.png\";\nimport img_itm3 from \"./img/m-11.png\";\n\nimport img_discord from \"./img/discord.png\";\nimport img_twitter from \"./img/twitter.png\";\n\n\n\n\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  \n  const [price, setPrice] = useState<string>('-');\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed,\n        price,\n      } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n      \n      setPrice(price?.toFixed(10)+'' || '-');\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(refreshCandyMachineState, [\n    wallet,\n    props.candyMachineId,\n    props.connection,\n  ]);\n\n  const mintcontainerClass = wallet ? 'mint connected' : 'mint';\n\n\n  return (\n    <div className=\"container\" style={{backgroundImage: `url(${img_hero})`}}>\n\n    <div className=\"wrap\">\n\n      <section className=\"hero\" >\n        <div className=\"cta\">\n          <div className=\"hl\">\n            The Lambo<br />\n            Diamond Hands Club\n          </div>\n          <div className=\"cp\">            \n            Own 1 of a kind PIXEL LAMBOS.<br />Each LAMBO is unique and there doesn't exist another like it.\n          </div>\n\n          <div className=\"somelinks\">\n            <a href=\"https://discord.gg/cpJ3seJM\"><div style={{backgroundImage: `url(${img_discord})`}} /></a>\n            <a href=\"https://twitter.com/PixeLambo\"><div style={{backgroundImage: `url(${img_twitter})`}} /></a>\n          </div>\n\n        </div>    \n      </section>\n\n      <div className={mintcontainerClass}>\n\n          <MintContainer>\n            {!wallet ? (\n              <ConnectButton fullWidth={false} className=\"mintbtn\">Connect Wallet</ConnectButton>\n            ) : (\n              <MintButton\n                disabled={isSoldOut || isMinting || !isActive}\n                onClick={onMint}\n                variant=\"contained\"\n                className=\"mintbtn\"\n                style={{width:'50%'}}\n              >\n                {isSoldOut ? (\n                  \"SOLD OUT\"\n                ) : isActive ? (\n                  isMinting ? (\n                    <CircularProgress />\n                  ) : (\n                    \"MINT\"\n                  )\n                ) : (\n                  <Countdown\n                    date={startDate}\n                    onMount={({ completed }) => completed && setIsActive(true)}\n                    onComplete={() => setIsActive(true)}\n                    renderer={renderCounter}\n                  />\n                )}\n              </MintButton>\n            )}\n          </MintContainer>\n          {wallet && (\n            <div className=\"price\">\n            {price} SOL\n            </div>\n          )}\n\n            {wallet && <div className=\"nftinfo\">{itemsRemaining} out of {itemsAvailable} available</div>}\n          </div>\n\n                  \n      {/* <!-- mint here --> */}\n\n</div>\n        <div className=\"lineup\" style={{backgroundImage: `url(${img_about})`}}>\n          <img src={img_about} alt=\"\" className=\"icon\" />\n        </div>\n\n<div className=\"wrap-blk\">\n<div className=\"wrap\">\n\n      <div className=\"content\">\n\n\n        <section className=\"about\">\n          <div>\n            <div className=\"hl\">About</div>\n\n            <span className=\"aboutp\">\n              <p>\n              Incredibly awesome hand drawn Pixel Lambos, drivers and backgrounds all come together in unique 1 off custom art work.\n              </p>\n              <p>\nWe are only releasing 3333 Lambos out into the world for mint so they are going to be ultra exclusive. We are then giving away upto a 1000 free Lambos to lucky holders! So there’s a pretty high chance you come out of this with 2 ULTRA AWESOME AND RARE LAMBOS!\n              </p>\n            </span>\n            \n          </div>\n        </section>\n\n        <section className=\"itemcontainer\">\n          \n            <div className=\"item\">\n              <div><img className=\"itemimg\" src={img_itm1} alt=\"\" /></div>\n              <div className=\"itemc\">\n                <strong>All Lambos</strong>\n                <p>18 production Lambos from 1964 to 2021. Every single one painstakingly drawn and hand crafted to perfection</p>\n              </div>\n            </div>\n\n            <div className=\"item\">\n              <div><img className=\"itemimg\" src={img_itm2} alt=\"\" /></div>\n              <div className=\"itemc\">\n                <strong>Drivers</strong>\n                <p>Half the Lambos have 11 different drivers! Maybe you’ll get lucky with one that’s just like you!</p>\n              </div>\n            </div>\n\n            <div className=\"item\">\n              <div><img className=\"itemimg\" src={img_itm3} alt=\"\" /></div>\n              <div className=\"itemc\">\n                <strong>Backgrounds</strong>\n                <p>50 Stunning and unique pixel drawn backgrounds inspired from Geek and Crypto culture</p>\n              </div>\n            </div>\n\n          \n        </section>\n      \n        <img src={img_lineup} alt=\"\" className=\"reflectionlineup\" />\n        \n        <section className=\"details\">\n          <div>\n            <div className=\"hl\">Roadmap and Details</div>\n            <p>\n            We have all the up to date details on our discord!<br />\n            We suggest heading over there to get the latest.\n            </p>\n            <p>\n            Info about MarketPlace Listing, Exclusive Airdrops,<br />\n            Floorsweeping, Collabs and Special Giveaways\n            </p>\n\n            \n            <div className=\"somelinks\">\n              <a href=\"https://discord.gg/cpJ3seJM\"><div style={{backgroundImage: `url(${img_discord})`}} /></a>\n              <a href=\"https://twitter.com/PixeLambo\"><div style={{backgroundImage: `url(${img_twitter})`}} /></a>\n            </div>\n          </div>\n        </section>\n\n\n       \n\n      </div>\n      \n      <section className=\"footer\">\n        @ 2021 Lambo Diamond Hands Club. All rights reserved.\n      </section>\n\n\n    <div className=\"wallet\">\n      {wallet && (\n        <p>Wallet {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n      )}\n\n      {wallet && <p>Balance: {(balance || 0).toLocaleString()} SOL</p>}\n\n      {wallet && <p>Total Available: {itemsAvailable}</p>}\n\n      {wallet && <p>Redeemed: {itemsRedeemed}</p>}\n\n      {wallet && <p>Remaining: {itemsRemaining}</p>}\n\n    </div>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n\n      </div>\n      </div>\n\n</div>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\n\nconst theme = createTheme({\n  \n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network })\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                config={config}\n                connection={connection}\n                startDate={startDateSeed}\n                treasury={treasury}\n                txTimeout={txTimeout}\n              />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}